{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token.service\";\nexport class InterceptorService {\n  constructor(tokenService) {\n    this.tokenService = tokenService;\n  }\n  intercep(req, next) {\n    let intReq = req;\n    const token = this.tokenService.getToken();\n    if (token != null) {\n      intReq = req.clone({\n        headers: req.headers.set('Authorization', 'Bearer' + token)\n      });\n    }\n    return next.handle(intReq);\n  }\n}\nInterceptorService.ɵfac = function InterceptorService_Factory(t) {\n  return new (t || InterceptorService)(i0.ɵɵinject(i1.TokenService));\n};\nInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InterceptorService,\n  factory: InterceptorService.ɵfac,\n  providedIn: 'root'\n});\nexport const interceptorProvider = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: InterceptorService,\n  multi: true\n}];","map":{"version":3,"mappings":"AAAA,SAIEA,iBAAiB,QACZ,sBAAsB;;;AAQ7B,OAAM,MAAOC,kBAAkB;EAC7BC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAiB;EAEjDC,QAAQ,CACNC,GAAqB,EACrBC,IAAiB;IAEjB,IAAIC,MAAM,GAAGF,GAAG;IAChB,MAAMG,KAAK,GAAG,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE;IAC1C,IAAID,KAAK,IAAI,IAAI,EAAE;MACjBD,MAAM,GAAGF,GAAG,CAACK,KAAK,CAAC;QACjBC,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAGJ,KAAK;OAC3D,CAAC;;IAEJ,OAAOF,IAAI,CAACO,MAAM,CAACN,MAAM,CAAC;EAC5B;;AAfWN,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAa,SAAlBb,kBAAkB;EAAAc,YAFjB;AAAM;AAoBpB,OAAO,MAAMC,mBAAmB,GAAG,CACjC;EACEC,OAAO,EAAEjB,iBAAiB;EAC1BkB,QAAQ,EAAEjB,kBAAkB;EAC5BkB,KAAK,EAAE;CACR,CACF","names":["HTTP_INTERCEPTORS","InterceptorService","constructor","tokenService","intercep","req","next","intReq","token","getToken","clone","headers","set","handle","factory","providedIn","interceptorProvider","provide","useClass","multi"],"sourceRoot":"","sources":["C:\\Users\\Nicolas Koch\\Documents\\GitHub\\ProyectoIntegrador_NicolasWalterKoch\\Frontend\\src\\app\\services\\interceptor.ts"],"sourcesContent":["import {\n  HttpEvent,\n  HttpHandler,\n  HttpRequest,\n  HTTP_INTERCEPTORS,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TokenService } from './token.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InterceptorService {\n  constructor(private tokenService: TokenService) {}\n\n  intercep(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    let intReq = req;\n    const token = this.tokenService.getToken();\n    if (token != null) {\n      intReq = req.clone({\n        headers: req.headers.set('Authorization', 'Bearer' + token),\n      });\n    }\n    return next.handle(intReq);\n  }\n}\n\nexport const interceptorProvider = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useClass: InterceptorService,\n    multi: true,\n  },\n];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}